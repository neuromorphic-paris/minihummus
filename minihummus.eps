%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.5 (Build 19F101) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 925 359
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 925 359
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: BYCBZC+SFProText-Thin
%!FontType1-1.0: BYCBZC+SFProText-Thin 1.0%%CreationDate: 7/1/20% Copyright 2020 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.0) readonly def/FullName (SFProText Thin) readonly def/FamilyName (SFProText) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -339 def/UnderlineThickness 61 defend readonly def/FontName /BYCBZC+SFProText-Thin def/PaintType 0 def/FontType 1 def/FontMatrix [0.0005 0 0 0.0005 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /M putdup 34 /i putdup 35 /n putdup 36 /h putdup 37 /u putdup 38 /m putdup 39 /s putdup 40 /S putdup 41 /p putdup 42 /k putdup 43 /g putdup 44 /space putdup 45 /N putdup 46 /e putdup 47 /t putdup 48 /w putdup 49 /o putdup 50 /r putdup 51 /l putdup 52 /a putreadonly def/FontBBox {-777 -1116 5198 2546} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF1A47A414A20ADABCE47FA2CD08E04C75A0A7DF9874BB93CBFA7285E62753668691435918CE67CB874821BC5225236238B66BC8E8D99348E861573D62E272503A57C582AB3AB2F4744660207BC0556A1510EFA02FAAA4872510D2B56B259A9C97B8A53B4FE966A4382EBAA840A30C71AC4AB25109683E364A2D1BF2A6BE0DDB241B8CB3F4971970DB021A22124F3AA6D4C1559CE979C8A50A6D5908EA90382E5D500383C47BDC0C454684A51024A5EBDEF9B438B08F5EF322F99B595FD51479C305210CDD5E5C45DFA64E145F7AD13BD4746C5D0E6F7E100EFDE6F5DFA00701E3B2C1A3D3F158D1E87D1321A164B5728118D28CA963D4897BDEAF5BAB59F4D3701FCFD4747972467EE7F5D7B1066421E615F10E9CB99AA3BDA762621A58913E16DFC5A6ACA85410098B2083F4EB15AC26B574333086BD51354501925B3D4683ADEC6C2B1D58E812A82CB2F630CF9262F9F4D7967BA5DD430738A36199C1BE72D6CE23AC4BD03F87E8C72184C6AF1B7763CAF5D85ED8574D9139219CB4CC57699C06A041A5D74E05AF212019944B1A35C13F7A2215C6A8B4DD6E15A0B0A0A6B438A841F37CB7117EEBA853E14BDD199B5BB15B2487073103048C706646E07985949CEA901534991B0162589EF0840986303DDF9C6E2DFA09A6E029A8E341C08BD1A743637B62BFAE1A238B8CE9CE28D8E4B5F51B910792B4C906BC9DD05FA39E21646345B8550883DC62230E73D33259F32347287581B73C1AAE27A28B19543117D0FAC41A44ED499AED9E5A1E1C49AA24CBCCA63B40FFAF9894D6E18EA001B58FC5D17A8AC346B6747C38FB91645BE11ADA9F296B19A3FA798DE351880A7785D1464B5A1422D384F546136307522B985B4C7992EFE788A35D42D08A14807DC3595A071CD880CB4C43AD846D0FB35A490EB8C9C205C4380D9923E227C79EFA6F0B15BD6B16A8293D5C979784E6DC6F1B55D45DBA9B9B53BBA43B132AA4DB1C921C1827220A7ED696FBCD195C7C7E6D3A93521219EFDABBA0B339E53AC2AB752513911BA665F7C30C001F1C69A7ACFF70ABA741294F1C48F297FFF0A3AD03129589A65A3DF712F62927A36A5F7C66E62894761E789E70ECB1B109B8823C1752035DCA9F3D893B3C53366DF48059B6F12EECED5F2DAB6761DFE0129EBC2827E5844510778A4E192D870C6BEE4BF64FBAAA821E9A7C2050E0B08482499CDD7B12D70A9DB78544B48FC2A629B02B9A5744E54F36A73CE4052B90293F06D3DEF7505BDE45485EE068944D5A9AFF9379CB32F21ECC5BEFA3AEBE480444ADC354DBCB3C96F26C1FAF9E54B16395CAD87B6C3F584395755AFBC4B9C2CB14EF3619251A7F388AA0E16F6AD7861F701134FCDD0EEB0F11B46C9CCA1049D41F88448F571A7097EE1B34FC8370B99411805CEB95CD0E391B83DEAACD64ACF4630D6CA1B24352D70F96BAFE62FBEB09A5AE94DE72399DD5F0A5F358AB5E53CD35430C1663AFCA238D775177F10DE9028C9F227EE42DBA4D29894EAFD08745E9B31CCA486E6D1A3B614DE412CD4A43CB1AC7091467899046BA9DED813F700C400B58258A2819B6D6938E3B8E694982FDA21A078919DC10FD8DAB1F5A4854F1BFD5F4DFF2F7986551EF8A887385F9AC5DB4C0FCCB95ACA835FC803952D0D2F4F1B4E11AF70A62E422558860EB484C5D4B414B0DDD9D99A26D4735C7168C960B115F92751DDBA8E90CAFD0811EBA0CB1676B8E65E0731B0EB20735C79E4442D09BAC7104FF85E96D6A1F5BB425A29110C871B2E999671AB378DCB6A655DCE69BB45D81A33D94ED523319C1235AF0736ED7B7754B908540AC87FCFE344AFE01A9C4AF356070E339A9173869C0E6A1DB5E9D6DEF82933A7441F7FF0DEBC8B751AA81C0C5A656BD425C809A9F38DC65A5FB8B74BB3EC15AB1143E2EE6A08D4CEF8138CB39F57ADB5D4D47408C91B1C16C8342FE1ED70AFFBE157FB7AD99DF7B25E9477906CEF3CEE0B68A43580F52DE1AC2837A9E285EBADD094B21A1577B2BBA58D6E1EFD95AFBFAE2E5D7D4A37BF9A433CB4701BB951C5569CD64D26F9E8B04781F060CC421A1AF75E6141978494A67660B6EC531D9B664FCDC26F2247AE2C306C09795C6E268C58298FEAFE97907710C7DDF8F5156724900C66A1D95E0D83BC90E327D5074728815A25CA8B99F2847902AC33CB1B4D46155CDF782F40126631ACCCB1489BFC8FCDB255FD7C39A37DA80CCE14969E745948ACCC90D44C35C24E7805676D947E7B64ED196493FFD24725C2FF0EC4935236DF8A9209FF88B6C452F75D7B5C4C2FDA46C7E233CBC7B521DCD4141DCCB810FCC4B5AA35A69F488117C166A227A4D3D1C23F06C31A1A1D8644AFD5294975C104C052FFF9A432AF91C66F2D8B5E50CD6242B816E7676D66D999BE1A8BC863D39A996623E37720D7AC6DC4FDEBB8E527597C079FC59556CAE2409D9917447DDE61F46A360CE083F9BEDDA20831386EF04B33AF8C0CF07C845B4B712A7C9CB04753148D854BAAC7680FF08B4F78D28A982CDD604BAD4EF117959CFC9F2C99DB67DE7E26302927D5A18D4EC63CE866E838CD2704D6FC443797FB57C9F8971EC93878C33651D733BA17018399FF6DA6F4BC84232F1980A7395DDAF202DC57A414D9C97A31E5F1732675F79B325599D2C3238F28340698E4064420100184C4BC50C01B847429A14FE3AE374BA34675BF694FFB6433C98320F8B7ADBAD11854225DC7E8842F5B751EABC5EB9557E39E6565A1374CB1802461588690C6D58309FFC4C2B71653E46A24FBC56D58A28C0BC17F9A99542A4339CBF62CAD7E17291158A002A6B3DA7ACCFD2B13A91AD0E4FE71E916463DF4C52E3405C00D5EFEA152B380EBD7D472571E108D74D1D79410EC88DA67EA99589C5F939DCE63F464EECC7CCA4D4F95FEBA2386A4588A74CD9059CC4D5D3B05B8E60F96C8EE62E890F00A87C177C72E3DE4EA38DB6EE02E30F8DCB42FA91D5146249F0C936013D1B61932DAA7D9FC687C5F716EB10A8D968CE14E172DDAF0E2B6948DE79F0BFFDC1BAE91E931F91936D125F257A22771C24170544CD3305EB7C676A9AAD001842685159189D709F2168D355AC8B5A9D18BAC42C1649F9B9904CFB5A93BB1888310D048A75C1D7C77CC3459760301B1EF373B792ED372C9533DB064E6B9F6C24CE11378AC846DBF1844A7E7463D00EB406C74A71139B2811A15BA3D0CD8EE136256ACBA76A4DB4E19B50761033156C499B04BAEE8F91836DBBA617E8AE8AA6FE96E9AC754BD75BF57B4869E312B08EC7C5116CB6B8A2888E6131713E0D5050027A821E112F4BDBA5F2FD77E75F196B3F6DECC24266F8E96127E0A14259C9674CC6464467B27192F5A06BB9751ED23D0B46C9C175AB010CF3F19E84FA93C3DD6A9B03F6BDBCA36EC4D52E1CBFCA0FFBD1DC6F5A565392EAED5545C32F550177B7CA5D4C2D8C5770344AE011CF0778FB12707C5E81DAC34499E9E992871A9D994BA5B6BC228CD6E43EED66CA504B38788984511AE8309894A48307B82BA85FADBAB53961D23EB94D872AC359639A3D1E475EBA2397D9B921DF2FF96C01DF76A774139E054A52995AB31F487FAA10A02C0B31F681627CB4AB5D9BFBE0A7E9DC209805A7D9BBB229C1B85FAA6962DD7D654D39FF2AB8F8670D64AD536B73396BDE7B490B61627017FB11BF990021A36559BD0563F6E5A2D97359D3E4C2831DBACE22B70D0E634A89180DB0DCA3F39775BDACF11D31116D3ACA1946B00F4BAED844C41915BFF3909BADC7C2519E7378677301F22C54008058ACB6A59289645E1891D1468BBB4B6C38576498DACC87AF1695E7CB633EE508442BA11B5DD300EA1C0A35025C4A99DD295F5AAF458189B131F109BF2670AFFA5FBAFA9B567CEF7DE92B44DD4FFE4B487F02908CCD6AFECCE66160C030AD89656D3158FA8458D14EBA765B8969CD70C2ABC6D2945E8C8969F5BDAA90D18F729F3252BFA7F81B53257AC24C8CF0EB29D50AB1AB500923E460D3A33B677B95587C077C049F9F42E90363912023BA6A0B79BDE8EB7D3487DAA22B40DE006038CF896F92258EAF92E9F9CB487B419A6F90F375EA23DB04D0C131608E9CA028AD5185C791077C74AB007B2BAF440C0E2A193450B57AD63A7FF16F862CB27E306F0228527171A9A4159EEBE25E8165E48A9BB1C81626708D0C479816D4E6372524E10B8D3A0A6CBA8E7C6FC251435323319BFEC4798337FCF876BC691878DF5F15BAC4025B3C4F4A5263352554F075303893DBDBBF9F5AD0E3B5CDD0918FDD3A422777FE953057A4211E47B8C7368990171E30287B4E966184DD58FCABEA387F3C59C27D38ED497F65AEF736127E78FA4E63AADA747293BF36593A5DE97806F5EECD7EC862F5B348E8316D671651B3135EAB996F0477E1014E982B8E11470C8C1051D8CBCAC542754652025CD8A141B0C6B750F43DE5883508DB61ECFD13A61B501354B0FFFBD0F1D618CFCF4B423816C8601236CB63D95D05AE02E89823E8EAFDCF017F440629A5397C6278D04C81E722408BF94F1701D1496E95FC7303ABE5E1B4CF1AE504D1E4B5BF5C86E232B42304840A9BB34E73BA98A3186A01B72D98C920358DD40C9CBEC9990EF31F0313CC0E6610BFD7B3DDEE27C6F9571DDD0A780D11B00578255F6A760217C3B325BF9BB5C30B7EDB625707845990B4A61767140C47106F884C01B98BEC74483CEAC6F539746DEB3B3A037896456C2EDC65F4780AB2035CC0758F1EB060F91BAE12F8A78866AAB4D4FE1F9F9835FBEAD2C1BAE8B396E508D06E87EE75D502F8CDB47447A706B558E3341FC99DACB8C2AB33F1059FFA83084E3C6AC58F9C478A22F04D3865125AF0316864608FFD7904D3ECA7600C00C65A20BB6322FC7124FA0DF045CD320C5287D02A6AEFA3852131E178E5CDD1AC19070408F191B82C9BF90030E6F6227E7A8CF684941B3D207E5DA6733AAEDE01FAECA947122E34C09D441195BD425F8CE006ACC11A3EBAF9DECAEAE5F3BB523AD9535AFADF93D10DBB4AA292812895A49B1C1EFFC4B324173DE5FE9D4F374669CB4293D243DC8C28EBB2A52BEBA18DCEDA0E36080518055F49460C6172DB41618330C22D0DF3DD6A56C2753473AEAAEAA3ECAEF4FDBAF9A2C9A21F42F1241552453AA2CEC9D2E7B5BCE47C25C329FBA077B6893E9C429F7A2AAE4C372310FCF71901560A105BE46B97123442A0A69338CED5062BF080DD7C88E3D0021D06717C499D9FB911F978ED19A1F3BF270CD012D98F39047AA84A330D223B73F09001F06E53A12D949376CCF489BD09FDEAC7C9608C801D486274C042E1FD246A8FE2218D5F2833E8600E6937DEA15EB1D45DD2D7BB2B7AF8EE19D45566E697C634FA75CD674431FC6005C6D19F9E9EFD0D21FC14EE9A54A242DFDD4A88A8A130BBBEA136770D01E50FFCAFC8D289E2AFF3E21FB515C810E12A06094128528EC5F071EF95D57A8AF1A046696676FF68F0D81FC8407DCE02FCCC46DD283635F1BB70B71755F155B828B047A4E4F9FD9D730E1552D28706A2D98500FB1A40C87EB65220DF8957EE010D47E881502352AED1CFF2FB2C8695525E91A9B8BA7F957F895D567F0352DA34E900FA8415007F3CDABEC4335FECA347171598BAF02D869C0BA607B68836E2975649119E23274761EBB4395E80259047AE1D5132EE859FD02BF1E05539307B78378A741CE332289CB9070D12985FBE352DABDF05D7F57C849E9313070BE22DCCD15A26FED2EA30C8F8F529E3598D6995275D5933FCA26414B9E0FBF12832CCEC5C11DAB2C96EB3508C85DF9D86E2A6A7E5012BC85B5ED0DF3A7020722AB6C87A77BCD888FFA53775671D96E6FD6AFFC3BF0737C4FE1C3EC83D8AB6663C54CD071597CEA50805E9072D91F53194EDC3B74C559EE155B1395EBC55A626F1AFDC8E4D70907C2A0D19B4751B4A9081DA28B4DF6C931A551B78F0097BB9FE39A3D879234E5B5867DC8DD2456179F6B006075E5067C193D5665A097AFFC4F0A901D7FF2B9E8922FE81F3C761B3B75A386B4424CF8565180EDDB3F6A8B409BE11BADF4769C35281F3D60585CD38F61B64E27FC31F2213D5694AD5E1460F27665349946218AD9B2EE981B18009F922536B8BF6D55BFD7CB9A8DED78059641A8F12BBA5848A93DED9A17E59332B955B4B8682C989BEB2F6C592756599BFFCF15AD2387D599D8609BB75FB389C763337E7A6C54E2AF5971BC15D2788E9DF049AD639DA636A260F256BC7A565DF86A0FF495DE95BA7609E741A66EA601A6041A661BD00F309B8467F185F0BFA1D31555FD3684B72B41DAFFE3B8DE9426C821CCA6AF699FAA2E53AC85E03FC8BFBB52D4A04E20453BC6421924ABB838F0696DB706A7E788C719748ED3A3BEEF1D5645328BD373963FBCA8A17061A833B31CD10DCE34528F540CC4D557FCFD2AB4C223F6C714251EA78BE14C43B7165173AF8DA0AA54D9451106E0938ADA670EE091CCBB93D95EB6D71E68E40B6EE1BB08C0E597B641969788E4962BF4EBF4233E84E637E18A98A29BB99A03C7474A3D8CECE45C23D49E84D0D7518B24B32F0CA4D4E65E26031EC790268A08B720F8302435F641AC75F325A5EB48C294C32375CB0AAF9B666592D01490AD7DEAEA63A495AC190A64359A51F48D4927AA6AB8320E48019D63601ECED4A7E212E08F642FB88A3E97B2136AB40F0D1C6873844572DF8450E6921D37DC1EF8461B961378FBB1EE9E96D3EE78F9EA791CC3DB9988130ADF7BD49D95CB4C6F225CE930C5256D7DE8E662AEB2CFC0CCF90A9100D2169DFBF3A73B0E5E5FC4B30CBE258FFC2A5DD73555C058FA06243F343BA86D7826E09ECF4706E594AC03C1D69AE6DFA6E2D4739CBE754C059A0EC8545C07D68F48C2115408A2779CC46748E1A7497D5270812470FC5FD25FC3987DC37B3C0067671E3172B19D89D1F264D98F9153A933DD32D8C898272778F7D427FA505C47B4AF0DE265126DC24B8AD8F3EDDECFD4F51A6B057380D83ACF4320240D77686E9B67863FB1FD05E7DAF7384ED3571007BBD34339EF02C04182BE7B8FB9890E3BDCD9CCBB10252AE50C33C1B8195BDBD0ABCECD0094115B62A394FB3150C1BE0BE4C03FC3233618FF11E6CBACB9032934868B08E04D32277EDE10E02E7D1106D7AAFECF7757437089EBB3DC4BF4C4DF7ACC7EFE7C6E3EFC8D6C93229CF164760969CD4438DC730A65E75F9BB83ABD12AC0D24E736CCA157A9851FAD901A5F6256CDEF964874411FABA7AD8F1050785E51FABD84BFA7616FAF0C5E6281B47CFDC5BBDFC8055885129A3D289A7DC2B47E36DE7F35330BABDBD2BA51A9F68F9C4268DA1B0F75126067B6D44962069C990413F049A21A5E83565311FC6AA9916944DEEE39E1FAF713EC04305DF95265D51C3BBE9CCFB08C99795244A1142E7EAEF7BF5D33B294FBE7BAE71567BE456EF1C1D4571B69AA69F89A5CDF03C3F579058DE8C7814110251D2A6C26B628A3C138161D30A09B7A4F87CC45ED9C858972966A8529F271702BFF5E27A11F62D50C2E43440CFEDDFEB3FC90762D935352652F93563B8F1C36CD411E949BD82598FB91A959D618B5D1CC159298DCDBF49C3A79192EC147A16AE6A434C71EAA862ACC68279368E31B48CF68C8F690D366DD7BD0CCC539DCF35CDFE1D616B670A1381975ADC4B107A8B133E99FF0BC2D2A6C06E51535A30BB6DE712B9714DE614B923BC1F1F6211D49E527411C0FC910C9D6362C032B2DDF1DC673E8210B549947C3922B3362AC3D9BB1B2B1842F2D9A70782B459C98DDDF64D4D2946F7A3AD9F23CE47067165784753107773A0536580812C5309EC121E7FDA6BFDB9B0B9DC2EE1DBBD0B63697AF30E05311EF694F1047919FADE02B0DF91B96FE358C1B2258FB14AAA9752283E94DA2DB16C9867626852DB10DCE4B0D7BD373DB1AEAA0582F8EE35119C43CD7F60AE1A5DE73B17E3176A9747916C1D5FDD40C4DF8D976A95E1B0252EAFFEE671F49B860BDF9292A3376F58135BCFA5DE0696385BB724108A1E553D100D303E2D6010F849FECB1583331A258275B1546C60D0883B2F998AA258742300921CFDFF5E5A5BC8ACB40571217C2A62FD763DB84336D41798C7378ACD87D85980E99F9269184E986C559D0774C80FD8919AE84FB1578DE85A7C8800239C0ECFB0174BC5B78E239A82E6EB9D0396E798E3F9E8CDB5038CE107FF166A8F90B2367E19E3FA4CC5437128B1794ED9674736AAAD5B4AF75D1004F7AC27D67837A4B8A2FE0E978807359DBA753B01FE14D11B0E3766A0FDD1A838717F5608D90B29BF3C63CFB66ED497F6907EB7B63B0C9017C851A3570F2D4A7B367D0A974685DCE822D58B48EFD1056768D7FDAB37864D5FD444371139F5EFABE1C7806421B5AA7E85E6E4D3CD152CCE533F39C6F9FFE15171505A14BE6692A87D25B8ACF6F2F9C4D848D4613A032C86B0C1F41AD9AA22E4165F9015521E3B716BD89070424F2F6D3AF235DD1E924A5F0B3DCF090CC8AE5301FD4997C3454774BE7D723C6406BDF51CF489F592674BAD978FBCCCDA141162C7BE91B7269422DC1CEEDCECA5ACF91DD48261E0603B2CC9406CA853C9A94E95DB9B38E89E1F102B56D0AF4277DE0ECACF31310651FC061E61D045A62C8B6CD6D076061C8785425C809531B306682DD85462E2FB3A6F3969F6ED09FA46AD484CED51874F67DF82BD45416C344378A89EB167BC2895849B86613DBA9373C7A8062CEA97AB99D040A573E8C215DEFED976BC5212B20AAEF79CB41B49E0FFEC6351B0BF9AF3B85B4EEA5B264AB63CDCADBA07D86702B155DE543A1CCC6D873B0CD1745ACE786A270825B482A667A786A5351A6921C2CA2DFF1CC7B68E77BE36312504D8F7F62C24AB49C491DA6865F3EE085DDFE3BB8A24EEC88CA9A03E5912CE42FF466E0448B2D36AD58142826ADD8705DFF414540E11DE40F78162C0733922DB04AC14B652C2D6BDB27E2CB0E3586D001AB0CB599FE633A3C7696F73AB6BEC913FB63A4A9EF298F071D8D3E39265A1B10B081AFE08F9DDDCC34D35E16E8C0530F72EE39D24022B27F359524D1A5AEDF899344C0AF52388BE94F3799392D2C3B757A0EEBC0436289B7D255BFE846E6B14513854A6A2202054400C90F670EE9D512AE235CD33EDB26BC5E902DEE07D0217BD3C6E0667A0A81876344AECB9BA910A74E94C4362571BFA143D83FB36C44F3A9D2CED46435DF6605603A9437A30C8E19637222589DE486982F84E53A65FC3536C6BAFB54B00702F9DC1F71FE7DB67400D3733FB4A89043D94CD8F44D2B03CB159FA1DE1D76ACC71A8AD5A53FB0CF6A1AAD55DF61AE5C0948BB9B1803F2A8A94E74EC6C61A4EBB1BDD522CC995C1E2A99228800F013D674363104EEDC2AEA6163B8C81571CB243A383091269126125A8050664542B1622B4C48BC747D081CC60D923CBDD1748B2C858239E25300EEF94AF5FA3429693C2E263ABD492272D170E3083ACB2E4F89D039366F293191CE257F88A4F5F045880034791FC6106664BBCF5A146CB391ADCA64B42ECE8E99F64181BA163691BDD882B415536883A2725F12C6B18DF385B1E3129894CB7B19CEA1E7585F80F7BAC68C52BDDD032F9FBE70ED77B0B38039714BE43765F5D2F42E5F369CE21E1C6C45B68A1D5FC058B7E9782088EEFF690DA990C9CE056BCF06F67DCB9463656BE6FA1034458DA4ECD1644F534E2BE64FF182256AB92D4106DED5FFB36F77EA754D3162ED071596E239F1744851D3D863AFF8E81E0BBB7053256524D6F1B003453A71F56D77A4E7FBDBF7CC4B896FE84E2C2C3AB23EBE6039BABF9670156AC382A4507DEDF5E4B45C0FE0E76CF84A5F172FCD5E909777A0FF1BD5EC09D14D83988D8CCFD2AFBAC4031C5E00E1DCB798CBF710FC624E3E4EE519BA2DBDF22A439C460012A08F83658C62D26665B499DF97EBE25451E47845E3F41C52C62A9E93D934CE52BA7466605F6107051A3DC66C6E7CFC81CF2E146F77E38C7AF1FECBA10FA3EF927A52F4316FA204F64EEB491D7C7E80DCC76996A2AD177F6BE155265E2EA7402BF97CD82C77C3DC362AA3AC2B2A854E560C83873A601DE8A9C8BB32B89AAC9D1668F65A655A1C8BF19058717A3A7C459B1228A1537F2A3AF66D61A90619762E7A89D6BA57DDFD4237C804CE4A01A3BAC2D89B4FCA3A9D565B0BD61E9BC609706D4E352A5E812AEC0F7E4FCB8637F1DF24805C5A40C97032B2D05842CE5CB821E47CE904E44B90AD994A72336C069B7DB7A3D315FB4B3A60897271D13B8CC057C306DD647508779363D16A5F546B1A3F36E1228F77B89E2E74E116E4D38C565127ADEB92AEB11E6170B86F947608E9AFF529FA658212D6E50E8D4AC98DEC311EF292E286B42D2E74228B85231699DAA531B3AFD81FD5CB269214262D702103AB230038422074F0AD246608DE5D77D0289B101C6D746D723A6ACF38088F1350360255565105694208E783932342AB4D24D15FDE341FCE7B219E5E16EFB13D6FFE686B1CFD06E3C7DE1C1A23F04A5B1E68A050FDF71255A561539C8A060F95BC8447E29BC547AA51AF4BDD5CF82C0B443119BC960F0E5A62F1A3B4367042EE1A7F7D216460917E6BF534FC07180E27747D1C99BE021ED6F11B8A53FAF623BA9411BAFA707D6EB8AC183C2EB2EDEA1205D4D92774FE69F0DB30A510C05EADF8572065C5840984558D3AF40E20D3321870E7E8BD8EB212EC9AB1B636FB59FB07D1AE8B401B8F99F70BF0B4C7786CE40B7BF0FCFF94288AAB8ECE18E0A9FDF6DB25A6B1014B3AC81AC5A34CB7E2DDFD36299E1FF921D70A02E3EEEC0DE73336D7C7C3F523B2AEC56604ED099FE538758FAC32914E83D6B23F8853950144C6C0F14357DCCC15DEF00028D9BABC9D0D8139CFFA65BE8E7E91EBF04DBDB43A9BC5A1B4BCBB98D9B1D9E79930DB5C32212034EC98C6131C2940400478600592C2FF225CDD74D4975FD67C1E181AE198BA0C3A308204603448DD6B359B1D5472D76C0BDF4497137F3558679F37253DCC53AA84D154AAE26C5CF1CCFBCA73015EF8C98ADEAAA748EF0C7C175DC7137F46A341DF2174B65735C849C11F8C16A7E9D6B9ECFEDDD55DD1F43CB56F5D22254287D898974E00D2767CF161C275BD28EA17912EC3CA2E276B89530ECE84DE964EBA9CDAB0461ED81F56BF71552346BC1E5C37191F8736D1577EF79EB71989BEA02564423F1F8A3AB5A6C8B25BC1312F59626F5AC3028356D4FBA7CBB089D0A6C89117C4CCBDAEF333C7342716AA733ED136CCFB6625D89926ED2176FB5B994CF306DD2F61EC01B2C7D1524C4BFD64AAAE1699A0FA8AB528EE4EC016AE3D21CC35D848CCD914A50C39BE7722F59BB40DA7291853A19EA7D55E2F87F75C2EBE4C963798F5F99F5228FFDF03FD2C35A6ACAF3C727B73E38BF29BD01B9AB8B3340A822D14BE5327EE673BA07F746B72692240F48B2F8FD193F2F2A7FDAD32513DC84872C95E20754BB12584EE230BEA78A5A0645F651B1A309F52EDC36A46903CBB854EDC73EA3ED8FFB035207AC2038B265A8B4EBDDB4732C86B880710E5E86E54496FC6210629ABDE1E2B1F51AF8F38E270F86C0837465F55D40C22A9400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/BYCBZC+SFProText-Thin cguidfix
/F1.1/BYCBZC+SFProText-Thin renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.34901962 0.40392157 0.45882353 sc
q
179.2 0.60000002 m
131.33476 0.60000002 86.33242 19.240234 52.486328 53.086327 c
18.640234 86.932419 0 131.93477 0 179.8 c
0 227.66524 18.640234 272.66757 52.486328 306.51367 c
86.33242 340.35977 131.33476 359 179.2 359 c
227.06523 359 272.06757 340.35977 305.91367 306.51367 c
339.75977 272.66757 358.39999 227.66524 358.39999 179.8 c
358.39999 131.93477 339.75977 86.932419 305.91367 53.086327 c
272.06757 19.240234 227.06523 0.60000002 179.2 0.60000002 c
h
W
0 0 925 359 rc
-5 364 m
363.39999 364 l
363.39999 -4.4000001 l
-5 -4.4000001 l
h
f
Q
0.27450982 0.32156864 0.36862746 sc
q
179.2 337.24805 m
137.14258 337.24805 97.603516 320.87189 67.867188 291.13281 c
38.128124 261.39374 21.751953 221.85742 21.751953 179.8 c
21.751953 93.054688 91.885941 22.351954 179.2 22.351954 c
221.25742 22.351954 260.79648 38.728127 290.53281 68.467186 c
320.27188 98.206253 336.65079 137.74258 336.65079 179.8 c
336.65079 267.08124 265.97812 337.24805 179.2 337.24805 c
h
W
0 0 925 359 rc
16.751953 342.24805 m
341.65079 342.24805 l
341.65079 17.351954 l
16.751953 17.351954 l
h
f
Q
1 0.78823531 0.54901963 sc
q
315.13126 179.8 m
315.13126 104.72774 254.27226 43.868752 179.2 43.868752 c
104.12773 43.868752 43.268749 104.72774 43.268749 179.8 c
43.268749 254.87227 104.12773 315.73126 179.2 315.73126 c
254.27226 315.73126 315.13126 254.87227 315.13126 179.8 c
h
W
0 0 925 359 rc
38.268749 320.73126 m
320.13126 320.73126 l
320.13126 38.868752 l
38.268749 38.868752 l
h
f
Q
0.96862745 0.63137257 0.43137255 sc
q
258.84686 289.93515 m
251.60078 281.43399 251.98633 268.65625 260.02264 260.62265 c
328.8797 191.76289 286.09491 67.63047 180.425 67.63047 c
123.44063 67.63047 77.084763 113.98906 77.084763 170.9707 c
77.084763 215.96211 113.68437 252.56172 158.67578 252.56172 c
194.06953 252.56172 222.86523 223.76602 222.86523 188.37227 c
222.86523 160.65117 200.31485 138.10078 172.59648 138.10078 c
151.0168 138.10078 133.45938 155.65547 133.45938 177.23515 c
133.45938 193.90117 147.01913 207.46367 163.68515 207.46367 c
176.42188 207.46367 186.78516 197.10039 186.78516 184.36368 c
186.78516 173.97305 177.63046 165.67969 166.96367 167.12891 c
160.75664 167.97383 156.57578 173.56015 156.55118 179.82462 c
156.53751 182.89258 153.96992 185.35898 150.86368 185.20312 c
147.875 185.05547 145.6875 182.40039 145.73672 179.40898 c
145.94727 166.54648 156.47461 156.14766 169.38632 156.14766 c
184.94492 156.14766 197.60234 168.80508 197.60234 184.36368 c
197.60234 203.0668 182.38554 218.28085 163.68515 218.28085 c
141.05273 218.28085 122.64219 199.86758 122.64219 177.23515 c
122.64219 149.6918 145.05038 127.28359 172.59375 127.28359 c
206.27852 127.28359 233.68242 154.6875 233.68242 188.37227 c
233.68242 229.73242 200.0332 263.37891 158.67578 263.37891 c
107.7207 263.37891 66.264847 221.92578 66.264847 170.9707 c
66.264847 146.3586 74.096092 123.54024 87.396095 104.87813 c
81.049606 106.16055 74.241013 104.58281 69.040237 100.13399 c
93.663284 66.104691 133.68633 43.868752 179.2 43.868752 c
254.27226 43.868752 315.13126 104.72774 315.13126 179.8 c
315.13126 224.58359 293.12775 265.02774 258.84686 289.93515 c
h
W
0 0 925 359 rc
61.264843 294.93515 m
320.13126 294.93515 l
320.13126 38.868752 l
61.264843 38.868752 l
h
f
Q
q
195.33008 280.03671 m
195.33008 277.05078 192.90742 274.63086 189.92148 274.63086 c
186.93282 274.63086 184.51289 277.05078 184.51289 280.03671 c
184.51289 283.02539 186.93282 285.44531 189.92148 285.44531 c
192.90742 285.44531 195.33008 283.02539 195.33008 280.03671 c
h
W
0 0 925 359 rc
179.51289 290.44531 m
200.33008 290.44531 l
200.33008 269.63086 l
179.51289 269.63086 l
h
f
Q
q
137.63477 272.82617 m
137.63477 269.84024 135.21484 267.41757 132.22617 267.41757 c
129.24023 267.41757 126.81758 269.84024 126.81758 272.82617 c
126.81758 275.81485 129.24023 278.23477 132.22617 278.23477 c
135.21484 278.23477 137.63477 275.81485 137.63477 272.82617 c
h
W
0 0 925 359 rc
121.81758 283.23477 m
142.63477 283.23477 l
142.63477 262.41757 l
121.81758 262.41757 l
h
f
Q
q
137.63477 232.43945 m
137.63477 229.45352 135.21484 227.0336 132.22617 227.0336 c
129.24023 227.0336 126.81758 229.45352 126.81758 232.43945 c
126.81758 235.42813 129.24023 237.84805 132.22617 237.84805 c
135.21484 237.84805 137.63477 235.42813 137.63477 232.43945 c
h
W
0 0 925 359 rc
121.81758 242.84805 m
142.63477 242.84805 l
142.63477 222.0336 l
121.81758 222.0336 l
h
f
Q
q
101.57656 170.41837 m
101.57656 167.43242 99.153908 165.00977 96.167969 165.00977 c
93.18203 165.00977 90.759377 167.43242 90.759377 170.41837 c
90.759377 173.40703 93.18203 175.82695 96.167969 175.82695 c
99.153908 175.82695 101.57656 173.40703 101.57656 170.41837 c
h
W
0 0 925 359 rc
85.759377 180.82695 m
106.57656 180.82695 l
106.57656 160.00977 l
85.759377 160.00977 l
h
f
Q
q
159.26913 98.301956 m
159.26913 95.316017 156.84921 92.893356 153.86055 92.893356 c
150.8746 92.893356 148.45195 95.316017 148.45195 98.301956 c
148.45195 101.29063 150.8746 103.71055 153.86055 103.71055 c
156.84921 103.71055 159.26913 101.29063 159.26913 98.301956 c
h
W
0 0 925 359 rc
143.45195 108.71055 m
164.26913 108.71055 l
164.26913 87.893356 l
143.45195 87.893356 l
h
f
Q
q
216.96445 119.93906 m
216.96445 116.95039 214.54179 114.53047 211.55586 114.53047 c
208.56718 114.53047 206.14726 116.95039 206.14726 119.93906 c
206.14726 122.925 208.56718 125.34492 211.55586 125.34492 c
214.54179 125.34492 216.96445 122.925 216.96445 119.93906 c
h
W
0 0 925 359 rc
201.14726 130.34492 m
221.96445 130.34492 l
221.96445 109.53047 l
201.14726 109.53047 l
h
f
Q
q
238.59883 98.301956 m
238.59883 95.316017 236.17891 92.893356 233.19023 92.893356 c
230.2043 92.893356 227.78165 95.316017 227.78165 98.301956 c
227.78165 101.29063 230.2043 103.71055 233.19023 103.71055 c
236.17891 103.71055 238.59883 101.29063 238.59883 98.301956 c
h
W
0 0 925 359 rc
222.78165 108.71055 m
243.59883 108.71055 l
243.59883 87.893356 l
222.78165 87.893356 l
h
f
Q
q
289.08087 170.41837 m
289.08087 167.43242 286.6582 165.00977 283.67227 165.00977 c
280.68634 165.00977 278.26367 167.43242 278.26367 170.41837 c
278.26367 173.40703 280.68634 175.82695 283.67227 175.82695 c
286.6582 175.82695 289.08087 173.40703 289.08087 170.41837 c
h
W
0 0 925 359 rc
273.26367 180.82695 m
294.08087 180.82695 l
294.08087 160.00977 l
273.26367 160.00977 l
h
f
Q
q
281.8703 220.90312 m
281.8703 217.91446 279.44766 215.49454 276.46173 215.49454 c
273.47305 215.49454 271.05313 217.91446 271.05313 220.90312 c
271.05313 223.88907 273.47305 226.31172 276.46173 226.31172 c
279.44766 226.31172 281.8703 223.88907 281.8703 220.90312 c
h
W
0 0 925 359 rc
266.05313 231.31172 m
286.8703 231.31172 l
286.8703 210.49454 l
266.05313 210.49454 l
h
f
Q
q
253.02266 271.38516 m
253.02266 268.39648 250.60001 265.97656 247.61406 265.97656 c
244.62813 265.97656 242.20547 268.39648 242.20547 271.38516 c
242.20547 274.37109 244.62813 276.79102 247.61406 276.79102 c
250.60001 276.79102 253.02266 274.37109 253.02266 271.38516 c
h
W
0 0 925 359 rc
237.20547 281.79102 m
258.02264 281.79102 l
258.02264 260.97656 l
237.20547 260.97656 l
h
f
Q
q
231.38828 251.91367 m
231.38828 248.925 228.96562 246.50508 225.97969 246.50508 c
222.99101 246.50508 220.57109 248.925 220.57109 251.91367 c
220.57109 254.89961 222.99101 257.32227 225.97969 257.32227 c
228.96562 257.32227 231.38828 254.89961 231.38828 251.91367 c
h
W
0 0 925 359 rc
215.57109 262.32227 m
236.38828 262.32227 l
236.38828 241.50508 l
215.57109 241.50508 l
h
f
Q
q
90.759377 249.74805 m
90.759377 246.76212 88.336716 244.33945 85.350784 244.33945 c
82.362106 244.33945 79.942184 246.76212 79.942184 249.74805 c
79.942184 252.73672 82.362106 255.15665 85.350784 255.15665 c
88.336716 255.15665 90.759377 252.73672 90.759377 249.74805 c
h
W
0 0 925 359 rc
74.942184 260.15665 m
95.759377 260.15665 l
95.759377 239.33945 l
74.942184 239.33945 l
h
f
Q
0 0 0 sc
q
0 0 925 359 rc
1 0 0 -1 384 256 cm
/F1.1[ 80 0 0 -80 0 0]sf
0 76 m
(!"#"$%&&%')[ 67.343750 17.539062 46.445312 17.539062 46.953125 46.445312 68.750000 68.750000 46.445312 0.000000 ] xS
/F1.1[ 45 0 0 -45 0 0]sf
0 138 m
(\(\)"*"#+,-./012*,\("&%34/12)[ 27.575684 27.136230 9.865723 23.400879 9.865723 26.125488 27.136230 11.491699 32.080078 25.905762 15.292969 33.090820 26.499023 16.325684 23.400879 11.491699 27.575684 9.865723 38.671875 26.125488 9.953613 24.565430 14.721680 26.499023 0.000000 ] xS
ep
end
